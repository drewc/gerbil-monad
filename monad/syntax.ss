(import (for-syntax :std/stxutil :std/stxparam)
        :std/contract :std/stxparam)
(export #t)

(defsyntax (du stx)
  
  (def (bind-id id)
    (with-syntax ((binds (format-id #'id "~a.bind" #'id)))
      #'binds))
  
  (syntax-case stx (:bind)
    ((_ (id expr ... ~ contract) body ...)
     (and (identifier? #'id)
        (identifier? #'~)
        (or (free-identifier=? #'~ #':)
            (free-identifier=? #'~ #':-)
            (free-identifier=? #'~ #':~)))
       #'(using (id expr ... ~ contract)
  	   (du (id) body ...)))
    ((_ (id) body ...)
     (with-syntax ((bind (format-id #'id "~a.bind" #'id)))
       #'(du :bind bind body ...)))
      
    ((_ ~ bind var <~ exp body ...)
     (and (identifier? #'~)
	  (identifier? #'<~)
	  (free-identifier=? #'~ #':bind)
	  (free-identifier=? #'<~ #'<-))
     #'(bind exp (lambda (var) (du :bind bind body ...))))
    ((_ ~ bind result)
     (and (identifier? #'~)
	  (free-identifier=? #'~ #':bind))
     #'result)
    ((_ ~ bind form body ...)
     (and (identifier? #'~)
	  (free-identifier=? #'~ #':bind))
     #'(bind form (lambda _ (du :bind bind body ...))))
    ))


;; #;(defsyntax-parameter* @du-bind @@du-bind
;;   "Bad Syntax: @du-bind only valid within a `(du (using ...) ...)` block")
;; (defsyntax (du stx)
;;   (syntax-case stx (:bind)
;;     ((d (id expr ... ~ contract) body ...)
;;      (and (identifier? #'id)
;;         (identifier? #'~)
;;         (or (free-identifier=? #'~ #':)
;;             (free-identifier=? #'~ #':-)
;;             (free-identifier=? #'~ #':~)))
;;      (with-syntax ((bind (format-id #'id "~a.bind" #'id))
;; 		   (bindfn (datum->syntax #'d '%monad-bind-fn)))
;;        #'(using (id expr ... ~ contract)
;; 	   (let (bindfn (cut bind <> <>))
;; 	   ;(syntax-parameterize ((@@du-bind (quote-syntax bindfn)))
;;   	     (du :bind bind body ...)))))
;;        ;)
;;     ((_ ~ bind var <~ exp body ...)
;;      (and (identifier? #'~)
;; 	  (identifier? #'<~)
;; 	  (free-identifier=? #'~ #':bind)
;; 	  (free-identifier=? #'<~ #'<-))
;;      #'(bind exp (lambda (var) (du :bind bind body ...))))
;;     ((_ ~ bind result)
;;      (and (identifier? #'~)
;; 	  (free-identifier=? #'~ #':bind))
;;      #'result)
;;     ((_ ~ bind form body ...)
;;      (and (identifier? #'~)
;; 	  (free-identifier=? #'~ #':bind))
;;      #'(bind form (lambda _ (du :bind bind body ...))))
;;     ((d nested ...)
;;      (with-syntax ((bindfn (datum->syntax #'d '%monad-bind-fn)))
;;      #'(du :bind bindfn nested ...)))))

(defsyntax (type stx)
 (syntax-case stx ()
  ((_ name)
    (with-syntax ((export-typename (format-id #'name "~a::class" #'name))
                  (module-name (format-id #'name "~a::module" #'name))
                  (singleton (format-id #'name "~a::singleton" #'name)))
  #'(begin
      (module module-name
	(export (rename-out #t (name export-typename)))
	(defstruct name ())
	(def singleton (name)))
      (import module-name)
      (def name singleton))))))
